User:
-Home
-> de centrat tot feedul pe mijlocul paginii
-> de afisat imaginea de profil a userului intr-un post de pe feed
-> de adaugat un feild in baza de date pentru poza de profil
-> de evidentiat mai tare diferite posturi ale userului
Nota:momentan posturile sunt despartite prin linie punctata alba
-> de inlocuit descrierea cu promtul imaginii
-New Post
-> de eliminat fildul de descriptie(din /newpost)
-> de modificat "description" din baza de date cu "prompt"
-> feildul de promt sa fie acelasi pe care il avea vechiul "descripion"(ca si aspect)
-> de incercat ca ip-ul ngrok al modelui sa ramana acelasi(sau sa il poata modifica automat de fiecare data)
-> de verificat asezarea elementelor in pagina atunci cand afisez imaginea generata
-Search
-> de redenumit toate referintele din global in search
-> de gandit cum sa ramana functionalitatea(doar de admin/de admin si de user)
Nota:de sters search-ul din footer daca ramane exclusiv pentru admin
-> de implementat backend-ul pentru search de user
-> de inlocuit imaginea hardcodata cu imagea de profil a user-ilor
-> de schimbat culoarea icoanei in alb(cum ii si in componenta de footer)
-> de modificat scss-ul sa ramana in tematica cu situl
-Profile 
-> de sters followers and following
-> de updatat nr de posturi cu cel al userului
-> de adaugat o descrierea a profilului userului
-> de adaugat un feild in baza de date cu descrierea profilului
-> de rezolvat problema pozitioarii butonului de edit profile
-> de pus poza de profil a userului
-> de resize "profile-hedul" pe toata lungimea curenta a brawserului
-> de modificat scss-ul sa ramana in tematica cu situl
-Edit Profile
-> de adaugat posibilitatea de a-ti uploada o poza din calculator pentru imaginea de profil
-> de adaugat posibilitatea de a schimba si parola 
-> de pozitionat headrul de succes pe centrul ecranului
-> de adaugat un mesaj in caz ca nu s-a putut updata profilul
-> de facut partea de backend a edit profile
-> de stilizat cu scss ca sa fie mai estetic
-Profile Found
-> de aplicatat aceleasi modificari stilistice ca si pentru profilul userului
-> de sters butoanele de follow si unfollow
-> de facut partea de backend a afisari profilului 
-Login
-> de sters alerturile(alea de empty field) si inlocuite cu un error mesage
-Register
-> de adaugat mai multe feilduri pentru register
-> de adaugat mai multe verificare pentru fiecare feild
-> de sters alerturile(alea de empty field) si inlocuite cu un error mesage
Admin:
-Register
-> the same register ca si pentru user
-> la crearea contului o sa se afiseze un token format dintr-un string random de 10 caractere
-> un cont de admin se identifica prin token
-> crearea unei colectii noi pentru admin, formata din: id,username,parola,email si token
-> de facut partea de backend care gestioneaza crearea contului de admin
-> nu se poate accesa numai daca stii path-ul dinainte(o sa fie ceva de genu /adminregister)
-> intre admin register si login se poate naviga(ca la user)
-> de adaugat ceva sa se diferentieze registerul de user( de exmplu o icoana de admin)
-> in acelasi still ca si registerul pentru user(scrisul,culorile,mesajele de eroare,etc)
-Login
-> the same login ca si pentru user
-> pe langa username si parola, un admin mai are nevoie si de token pentru a se loga
-> de adaugat un mesaj daca tokenul adminului nu este bun
-> nu se poate accesa numai daca stii path-ul dinainte(o sa fie ceva de genu /adminlogin)
-> de adaugat ceva sa se diferentieze loginul de user( de exmplu o icoana de admin)
-> de creat partea de backend care gestioneaza loginul adminului(verificarea ca este admin)
-> se va folosi acelasi token(jwt) ca si pentru user,dar va mai fi setata o variabile denumita admin(care trebuie sa fie true)
-> orice pagina de admin nu se poate accesa daca admin nu este pe true
-> in acelasi still ca si loginul pentru user(scrisul,culorile,mesajele de eroare,etc)
-Heder/Footer
-> o sa se foloseasca un header si footer ca la user
-> footerul o sa aiba doua butoane: pagina de feed si de useri
-> pe header o sa fie si un button de logout ca la user(atunci cand se delogheaza flagul admin o sa se puna pe false)
-> odata delogat o sa fii redirectionat pe pagine de login al adminului
-Delete Post
-> o sa fie feed-ul normal al userului
-> adminul o sa mai aiba un buton de stergere pentru fecare post
-> un admin ar sterge o postare daca acesta ar fi considera "nepotrivita"
-> de updatat baza de date cu stergerea postului
-Ban User
-> adminul o sa poate vedea toate profilurile userilor(ca la search doar fara sa mai caute)
-> un admin poate vedea porfilul unui user pentru a determina daca il baneaza(sa le vada profilul)
-> un admin poate da ban sau unban la un user din lita
-> in dreptul fiecarului profil o sa apara daca ei sunt banati sau nu(sau o sa aiba un buton de ban langa profil)
-> fiecare user o sa aiba un field de banned in baza de date
->dupa fiecare modificare a fieldului de banned, baza de date o sa fie updatata
-> daca un user o sa fie banat el o sa primeasca un mesaj adecvat la login
Altele:
-> de refacut .ipynb-ul modelului pe google colab
-> de sters node_module din backend,frontend(din github)
-> de uploadat .ipynb-ul modelului de StableDifussion pe github
-> de updatat README-ul(instructini de pronire a backendului,frontendului si de hostare a modelului pe google colab)
-> de refactorizat tot stylul in scss-uri separate(sa nu mai am tagul style in nici o pagina)

Obs:
-> nu toate modificarile o sa trebuiasca facute pana in saptamana de predare(adica saptamana 6)
-> o sa trebuiasca sa fie prioritizate chestiile ce tin de functionalitate(Edith Profile,Search User,Admin Register/Login)

Feature that I would like to have someday:
-Follow/Unfollow users
-Like/Comment on posts
-Notification on Like/Comment/Follow
-Search by Prompt for simillar picture
-More Admin Features(like those in FZ:BZ Marketplace)